{"version":3,"sources":["setup/SceneComponents.ts","utils/DataStructureUtils.ts","utils/MathUtils.ts","meshes/RandomShape.ts","Main.tsx","setup/Lights.ts","index.tsx"],"names":["SceneComponents","container","color","_color","_renderer","_camera","_scene","_controls","_width","_height","this","window","innerWidth","innerHeight","Color","initRenderer","initCamera","initScene","initControls","width","height","setSize","aspect","updateProjectionMatrix","render","renderer","WebGLRenderer","antialias","setPixelRatio","devicePixelRatio","append","domElement","camera","PerspectiveCamera","position","set","scene","Scene","background","controls","OrbitControls","minDistance","maxDistance","DataStructureUtils","inputArray","size","reduce","array","item","index","slice","MathUtils","Math","floor","random","toString","RandomShape","numOfPoints","range","chunkSize","points","chunkPoints","geometry","material","object","geometries","i","push","Vector3","randFloat","randInt","DSU","chunk","length","ConvexGeometry","CatmullRomCurve3","getPoints","BufferGeometryUtils","mergeBufferGeometries","MeshLambertMaterial","MU","generateRandomHexadecimal","wireframe","Mesh","add","SCENE_COMPONENTS","Lights","ambientLight","point","AmbientLight","PointLight","copy","Main","useRef","useEffect","frameId","current","animate","requestAnimationFrame","addEventListener","handleResize","clientWidth","clientHeight","ref","id","App","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.fb6ef512.chunk.js","sourcesContent":["import { Color, PerspectiveCamera, Scene, WebGLRenderer } from 'three';\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls';\n\nexport default class SceneComponents {\n  private readonly container: HTMLDivElement;\n  private readonly _color: Color;\n  private readonly _renderer: WebGLRenderer;\n  private readonly _camera: PerspectiveCamera;\n  private readonly _scene: Scene;\n  private readonly _controls: OrbitControls;\n  private _width: number;\n  private _height: number;\n\n  constructor(container: HTMLDivElement, color: Color | string | number) {\n    this.container = container;\n    this._width = window.innerWidth;\n    this._height = window.innerHeight;\n    this._color = new Color(color);\n    this._renderer = this.initRenderer();\n    this._camera = this.initCamera();\n    this._scene = this.initScene();\n    this._controls = this.initControls();\n  }\n\n  public get camera() {\n    return this._camera;\n  }\n  public get scene() {\n    return this._scene;\n  }\n\n  public handleResize(width: number, height: number) {\n    this._width = width;\n    this._height = height;\n    this._renderer.setSize(width, height);\n    this._camera.aspect = width / height;\n    this._camera.updateProjectionMatrix();\n    this.render();\n  }\n\n  public render() {\n    this._renderer.render(this._scene, this._camera);\n  }\n\n  private initRenderer(): WebGLRenderer {\n    const renderer = new WebGLRenderer({ antialias: true });\n    renderer.setPixelRatio(window.devicePixelRatio);\n    renderer.setSize(window.innerWidth, window.innerHeight);\n    this.container.append(renderer.domElement);\n    return renderer;\n  }\n\n  private initCamera(): PerspectiveCamera {\n    const camera = new PerspectiveCamera(\n      45,\n      this._width / this._height,\n      1,\n      1000\n    );\n    camera.position.set(0, 0, 500);\n    return camera;\n  }\n\n  private initScene(): Scene {\n    const scene = new Scene();\n    scene.background = this._color;\n    return scene;\n  }\n\n  private initControls(): OrbitControls {\n    const controls = new OrbitControls(this._camera, this._renderer.domElement);\n    controls.minDistance = 100;\n    controls.maxDistance = 500;\n    return controls;\n  }\n}\n","class DataStructureUtils {\n  static chunk(inputArray: Array<any>, size: number): Array<any> {\n    return inputArray.reduce((array, item, index) => {\n      return index % size === 0\n        ? [...array, [item]]\n        : [...array.slice(0, -1), [...array.slice(-1)[0], item]];\n    }, []);\n  }\n}\n\nexport default DataStructureUtils;\n","export default class MathUtils {\n  public static generateRandomHexadecimal(): string {\n    return '#' + Math.floor(Math.random() * 16777215).toString(16);\n  }\n}\n","import DSU from '../utils/DataStructureUtils';\nimport MU from '../utils/MathUtils';\nimport {\n  BufferGeometry,\n  CatmullRomCurve3,\n  MathUtils,\n  Mesh,\n  MeshLambertMaterial,\n  Scene,\n  Vector3,\n} from 'three';\nimport { ConvexGeometry } from 'three/examples/jsm/geometries/ConvexGeometry';\nimport { BufferGeometryUtils } from 'three/examples/jsm/utils/BufferGeometryUtils.js';\n\nexport default class RandomShape {\n  private static readonly numOfPoints = 20;\n  private static readonly range = 50;\n  private readonly scene: Scene;\n  private readonly chunkSize: number;\n  private readonly points: Vector3[] = [];\n  private readonly chunkPoints: Vector3[][] = [];\n  private readonly geometry: BufferGeometry;\n  private readonly material: MeshLambertMaterial;\n  private readonly object: Mesh<BufferGeometry, MeshLambertMaterial>;\n\n  constructor(\n    scene: Scene,\n    numOfPoints = RandomShape.numOfPoints,\n    range = RandomShape.range\n  ) {\n    const geometries: ConvexGeometry[] = [];\n    this.scene = scene;\n    for (let i = 0; i < numOfPoints; i++) {\n      this.points.push(\n        new Vector3(\n          MathUtils.randFloat(-range, range),\n          MathUtils.randFloat(-range, range),\n          MathUtils.randFloat(-range, range)\n        )\n      );\n    }\n    this.chunkSize = MathUtils.randInt(3, 10);\n    this.chunkPoints = DSU.chunk([...this.points], this.chunkSize);\n    for (let i = 0; i < this.chunkPoints.length; i++) {\n      geometries.push(\n        new ConvexGeometry(\n          new CatmullRomCurve3(this.chunkPoints[i], true).getPoints(50)\n        )\n      );\n    }\n    this.geometry = BufferGeometryUtils.mergeBufferGeometries(geometries);\n    this.material = new MeshLambertMaterial({\n      color: MU.generateRandomHexadecimal(),\n      wireframe: false,\n    });\n    this.object = new Mesh(this.geometry, this.material);\n    this.scene.add(this.object);\n  }\n}\n","import './App.css';\nimport React, { MutableRefObject, useEffect, useRef } from 'react';\nimport SceneComponents from './setup/SceneComponents';\nimport RandomShape from './meshes/RandomShape';\nimport Lights from './setup/Lights';\n\nlet SCENE_COMPONENTS: SceneComponents;\n\nfunction Main() {\n  const container = useRef() as MutableRefObject<HTMLDivElement>;\n\n  useEffect(() => {\n    let frameId: number;\n    SCENE_COMPONENTS = new SceneComponents(container.current, '#000');\n    new Lights(SCENE_COMPONENTS.scene, SCENE_COMPONENTS.camera.position);\n    new RandomShape(SCENE_COMPONENTS.scene);\n\n    const start = () => {\n      if (!frameId) frameId = requestAnimationFrame(animate);\n    };\n\n    const animate = () => {\n      requestAnimationFrame(animate);\n      SCENE_COMPONENTS.render();\n    };\n\n    const handleResize = () => {\n      SCENE_COMPONENTS.handleResize(\n        container.current.clientWidth,\n        container.current.clientHeight\n      );\n    };\n\n    window.addEventListener('resize', handleResize);\n    start();\n  });\n\n  return <div ref={container} id=\"container\" />;\n}\n\nexport default Main;\n","import { AmbientLight, PointLight, Scene, Vector3 } from 'three';\n\nexport default class Lights {\n  private readonly ambientLight: AmbientLight;\n  private readonly point: PointLight;\n  private readonly scene: Scene;\n\n  constructor(scene: Scene, position: Vector3 = new Vector3()) {\n    this.ambientLight = new AmbientLight('#444');\n    this.point = new PointLight('#fff');\n    this.position = position;\n    this.scene = scene;\n    this.scene.add(this.ambientLight, this.point);\n  }\n\n  set position(position: Vector3) {\n    this.point.position.copy(position);\n  }\n}\n","import './index.css';\nimport React from 'react';\nimport Main from './Main';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter as Router } from 'react-router-dom';\n\nfunction App() {\n  return (\n    <Router>\n      <Main />\n    </Router>\n  );\n}\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}