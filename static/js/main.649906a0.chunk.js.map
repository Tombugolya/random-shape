{"version":3,"sources":["setup/SceneComponents.ts","utils/DataStructureUtils.ts","utils/MathUtils.ts","meshes/RandomShape.ts","setup/Lights.ts","components/Main.tsx","hooks/hooks.tsx","index.tsx"],"names":["SceneComponents","container","color","_color","_renderer","_camera","_scene","_controls","_width","_height","this","window","innerWidth","innerHeight","Color","initRenderer","initCamera","initScene","initControls","width","height","setSize","aspect","updateProjectionMatrix","render","renderer","WebGLRenderer","antialias","setPixelRatio","devicePixelRatio","append","domElement","camera","PerspectiveCamera","position","set","scene","Scene","background","controls","OrbitControls","minDistance","maxDistance","DataStructureUtils","inputArray","size","reduce","array","item","index","slice","MathUtils","Math","floor","random","toString","RandomShape","numOfPoints","range","chunkSize","object","points","chunkPoints","onKeyDown","event","key","generateNewShape","generateNewColor","MU","generateRandomHexadecimal","randInt","generateShape","addEventListener","add","tension","randFloat","generatePoints","DSU","chunk","material","MeshLambertMaterial","Mesh","generateGeometry","geometry","dispose","i","push","Vector3","geometries","length","ConvexGeometry","CatmullRomCurve3","getPoints","divisions","BufferGeometryUtils","mergeBufferGeometries","remove","Lights","_ambientLight","_pointLight","AmbientLight","PointLight","copy","SCENE_COMPONENTS","Main","useRef","beating","URLSearchParams","useLocation","search","get","useEffect","frameId","clock","Clock","current","shape","animate","requestAnimationFrame","animateFunctions","updateTension","sin","getElapsedTime","handleResize","clientWidth","clientHeight","cancelAnimationFrame","removeEventListener","ref","id","App","ReactDOM","document","getElementById"],"mappings":"0NAGqBA,E,WAUnB,WAAYC,EAA2BC,GAAiC,yBATvDD,eASsD,OARtDE,YAQsD,OAPtDC,eAOsD,OANtDC,aAMsD,OALtDC,YAKsD,OAJtDC,eAIsD,OAH/DC,YAG+D,OAF/DC,aAE+D,EACrEC,KAAKT,UAAYA,EACjBS,KAAKF,OAASG,OAAOC,WACrBF,KAAKD,QAAUE,OAAOE,YACtBH,KAAKP,OAAS,IAAIW,IAAMZ,GACxBQ,KAAKN,UAAYM,KAAKK,eACtBL,KAAKL,QAAUK,KAAKM,aACpBN,KAAKJ,OAASI,KAAKO,YACnBP,KAAKH,UAAYG,KAAKQ,e,wCAGxB,WACE,OAAOR,KAAKL,U,iBAEd,WACE,OAAOK,KAAKJ,S,0BAGd,SAAoBa,EAAeC,GACjCV,KAAKF,OAASW,EACdT,KAAKD,QAAUW,EACfV,KAAKN,UAAUiB,QAAQF,EAAOC,GAC9BV,KAAKL,QAAQiB,OAASH,EAAQC,EAC9BV,KAAKL,QAAQkB,yBACbb,KAAKc,W,oBAGP,WACEd,KAAKN,UAAUoB,OAAOd,KAAKJ,OAAQI,KAAKL,W,0BAG1C,WACE,IAAMoB,EAAW,IAAIC,IAAc,CAAEC,WAAW,IAIhD,OAHAF,EAASG,cAAcjB,OAAOkB,kBAC9BJ,EAASJ,QAAQV,OAAOC,WAAYD,OAAOE,aAC3CH,KAAKT,UAAU6B,OAAOL,EAASM,YACxBN,I,wBAGT,WACE,IAAMO,EAAS,IAAIC,IACjB,GACAvB,KAAKF,OAASE,KAAKD,QACnB,EACA,KAGF,OADAuB,EAAOE,SAASC,IAAI,EAAG,EAAG,KACnBH,I,uBAGT,WACE,IAAMI,EAAQ,IAAIC,IAElB,OADAD,EAAME,WAAa5B,KAAKP,OACjBiC,I,0BAGT,WACE,IAAMG,EAAW,IAAIC,IAAc9B,KAAKL,QAASK,KAAKN,UAAU2B,YAGhE,OAFAQ,EAASE,YAAc,IACvBF,EAASG,YAAc,IAChBH,M,aCzEUI,E,0FACnB,SAAaC,EAAwBC,GACnC,OAAOD,EAAWE,QAAO,SAACC,EAAOC,EAAMC,GACrC,OAAOA,EAAQJ,IAAS,EAAjB,sBACCE,GADD,CACQ,CAACC,KADT,sBAECD,EAAMG,MAAM,GAAI,IAFjB,uBAEyBH,EAAMG,OAAO,GAAG,IAFzC,CAE6CF,QACnD,Q,KCNcG,E,8GACnB,WACE,MAAO,IAAMC,KAAKC,MAAsB,SAAhBD,KAAKE,UAAqBC,SAAS,Q,qBCa1CC,E,WAWnB,WACEpB,EACAqB,EACAC,EACAC,GACC,IAAD,gCAdeF,iBAcf,OAbeE,eAaf,OAZeD,WAYf,OAXetB,WAWf,OAVMlC,WAUN,OATM0D,YASN,OARMC,OAAoB,GAQ1B,KAPMC,YAA2B,GAOjC,KAsEMC,UAAY,SAACC,GACnB,OAAQA,EAAMC,KACZ,IAAK,IACL,IAAK,IACH,EAAKC,mBACL,MACF,IAAK,IACL,IAAK,IACH,EAAKC,qBA7ETzD,KAAK0B,MAAQA,EACb1B,KAAKR,MAAQ,IAAIY,IAAMsD,EAAGC,6BAC1B3D,KAAK+C,YAAcA,GAAe,GAClC/C,KAAKgD,MAAQD,GAAe,GAC5B/C,KAAKiD,UAAYA,GAAaR,IAAUmB,QAAQ,EAAG,GACnD5D,KAAKkD,OAASlD,KAAK6D,gBACnB5D,OAAO6D,iBAAiB,UAAW9D,KAAKqD,WACxCrD,KAAK0B,MAAMqC,IAAI/D,KAAKkD,Q,iDAGtB,WAE8C,IAD5Cc,EAC2C,uDADzBvB,IAAUwB,UAAU,EAAG,GAEzCjE,KAAKmD,OAASnD,KAAKkE,iBACnBlE,KAAKoD,YAAce,EAAIC,MAAJ,YAAcpE,KAAKmD,QAASnD,KAAKiD,WACpD,IAAMoB,EAAW,IAAIC,IAErB,OADAD,EAAS7E,MAAQQ,KAAKR,MACf,IAAI+E,IAAKvE,KAAKwE,iBAAiBR,GAAUK,K,2BAGlD,SAAqBL,GACnBhE,KAAKkD,OAAOuB,SAASC,UACrB1E,KAAKkD,OAAOuB,SAAWzE,KAAKwE,iBAAiBR,K,4BAG/C,WAEE,IADA,IAAMb,EAAoB,GACjBwB,EAAI,EAAGA,EAAI3E,KAAK+C,YAAa4B,IACpCxB,EAAOyB,KACL,IAAIC,IACFpC,IAAUwB,WAAWjE,KAAKgD,MAAOhD,KAAKgD,OACtCP,IAAUwB,WAAWjE,KAAKgD,MAAOhD,KAAKgD,OACtCP,IAAUwB,WAAWjE,KAAKgD,MAAOhD,KAAKgD,SAI5C,OAAOG,I,8BAGT,SAAyBa,GAEvB,IADA,IAAMc,EAA+B,GAC5BH,EAAI,EAAGA,EAAI3E,KAAKoD,YAAY2B,OAAQJ,IAC3CG,EAAWF,KACT,IAAII,IACF,IAAIC,IACFjF,KAAKoD,YAAYuB,IACjB,EACA,aACAX,GACAkB,UAAUpC,EAAYqC,aAI9B,OAAOC,IAAoBC,sBAAsBP,K,8BAGnD,WACE9E,KAAKkD,OAAOuB,SAASC,UACrB1E,KAAKkD,OAAOmB,SAASK,UACrB1E,KAAK0B,MAAM4D,OAAOtF,KAAKkD,QACvBlD,KAAKkD,OAASlD,KAAK6D,gBACnB7D,KAAK0B,MAAMqC,IAAI/D,KAAKkD,U,8BAGtB,WACElD,KAAKR,MAAQ,IAAIY,IAAMsD,EAAGC,6BAC1B3D,KAAKkD,OAAOmB,SAAS7E,MAAQQ,KAAKR,U,KAnFjBsD,EACKqC,UAAY,G,ICdjBI,E,WAKnB,WAAY7D,GAAkD,IAApCF,EAAmC,uDAAf,IAAIqD,IAAW,yBAJ5CW,mBAI4C,OAH5CC,iBAG4C,OAF5C7F,YAE4C,EAC3DI,KAAKwF,cAAgB,IAAIE,IAAa,QACtC1F,KAAKyF,YAAc,IAAIE,IAAW,QAClC3F,KAAKwB,SAAWA,EAChBxB,KAAKJ,OAAS8B,EACd1B,KAAKJ,OAAOmE,IAAI/D,KAAKwF,cAAexF,KAAKyF,a,0CAG3C,SAAajE,GACXxB,KAAKyF,YAAYjE,SAASoE,KAAKpE,O,gBCR/BqE,E,QAqDWC,MAnDf,WACE,IAAMvG,EAAYwG,mBACZC,EAAwC,SCTvC,IAAIC,gBAAgBC,cAAcC,QDSdC,IAAI,WA8C/B,OA5CAC,qBAAU,WACR,IAAIC,EACEC,EAAQ,IAAIC,IAClBX,EAAmB,IAAIvG,EAAgBC,EAAUkH,QAAS,QAC1D,IAAIlB,EAAOM,EAAiBnE,MAAOmE,EAAiBvE,OAAOE,UAC3D,IAAMkF,EAAQ,IAAI5D,EAAY+C,EAAiBnE,OAE/CzB,OAAM,MAAYyG,EAElB,IAIMC,EAAU,SAAVA,IACJL,EAAUM,sBAAsBD,GAChCE,IACAhB,EAAiB/E,UAGb+F,EAAmB,WACnBb,GAASU,EAAMI,cAAcpE,KAAKqE,IAAIR,EAAMS,oBAG5CC,EAAe,WACnBpB,EAAiBoB,aACf1H,EAAUkH,QAAQS,YAClB3H,EAAUkH,QAAQU,eAYtB,OAHAlH,OAAO6D,iBAAiB,SAAUmD,GAzB3BX,IAASA,EAAUM,sBAAsBD,IA4BzC,WAPLS,qBAAqBd,GACrBrG,OAAOoH,oBAAoB,SAAUJ,GAQrChH,OAAOoH,oBAAoB,SAAUJ,MAEtC,CAACjB,IAEG,qBAAKsB,IAAK/H,EAAWgI,GAAG,e,yBEpDjC,SAASC,IACP,OACE,cAAC,IAAD,UACE,cAAC,EAAD,MAKNC,IAAS3G,OAAO,cAAC0G,EAAD,IAASE,SAASC,eAAe,W","file":"static/js/main.649906a0.chunk.js","sourcesContent":["import { Color, PerspectiveCamera, Scene, WebGLRenderer } from 'three';\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls';\n\nexport default class SceneComponents {\n  private readonly container: HTMLDivElement;\n  private readonly _color: Color;\n  private readonly _renderer: WebGLRenderer;\n  private readonly _camera: PerspectiveCamera;\n  private readonly _scene: Scene;\n  private readonly _controls: OrbitControls;\n  private _width: number;\n  private _height: number;\n\n  constructor(container: HTMLDivElement, color: Color | string | number) {\n    this.container = container;\n    this._width = window.innerWidth;\n    this._height = window.innerHeight;\n    this._color = new Color(color);\n    this._renderer = this.initRenderer();\n    this._camera = this.initCamera();\n    this._scene = this.initScene();\n    this._controls = this.initControls();\n  }\n\n  public get camera() {\n    return this._camera;\n  }\n  public get scene() {\n    return this._scene;\n  }\n\n  public handleResize(width: number, height: number) {\n    this._width = width;\n    this._height = height;\n    this._renderer.setSize(width, height);\n    this._camera.aspect = width / height;\n    this._camera.updateProjectionMatrix();\n    this.render();\n  }\n\n  public render() {\n    this._renderer.render(this._scene, this._camera);\n  }\n\n  private initRenderer(): WebGLRenderer {\n    const renderer = new WebGLRenderer({ antialias: true });\n    renderer.setPixelRatio(window.devicePixelRatio);\n    renderer.setSize(window.innerWidth, window.innerHeight);\n    this.container.append(renderer.domElement);\n    return renderer;\n  }\n\n  private initCamera(): PerspectiveCamera {\n    const camera = new PerspectiveCamera(\n      45,\n      this._width / this._height,\n      1,\n      1000\n    );\n    camera.position.set(0, 0, 500);\n    return camera;\n  }\n\n  private initScene(): Scene {\n    const scene = new Scene();\n    scene.background = this._color;\n    return scene;\n  }\n\n  private initControls(): OrbitControls {\n    const controls = new OrbitControls(this._camera, this._renderer.domElement);\n    controls.minDistance = 100;\n    controls.maxDistance = 500;\n    return controls;\n  }\n}\n","export default class DataStructureUtils {\n  static chunk(inputArray: Array<any>, size: number): Array<any> {\n    return inputArray.reduce((array, item, index) => {\n      return index % size === 0\n        ? [...array, [item]]\n        : [...array.slice(0, -1), [...array.slice(-1)[0], item]];\n    }, []);\n  }\n}\n","export default class MathUtils {\n  public static generateRandomHexadecimal(): string {\n    return '#' + Math.floor(Math.random() * 16777215).toString(16);\n  }\n}\n","import DSU from '../utils/DataStructureUtils';\nimport MU from '../utils/MathUtils';\nimport {\n  BufferGeometry,\n  CatmullRomCurve3,\n  Color,\n  MathUtils,\n  Mesh,\n  MeshLambertMaterial,\n  Scene,\n  Vector3,\n} from 'three';\nimport { ConvexGeometry } from 'three/examples/jsm/geometries/ConvexGeometry';\nimport { BufferGeometryUtils } from 'three/examples/jsm/utils/BufferGeometryUtils.js';\n\nexport default class RandomShape {\n  private static readonly divisions = 50;\n  private readonly numOfPoints: number;\n  private readonly chunkSize: number;\n  private readonly range: number;\n  private readonly scene: Scene;\n  private color: Color;\n  private object: Mesh<BufferGeometry, MeshLambertMaterial>;\n  private points: Vector3[] = [];\n  private chunkPoints: Vector3[][] = [];\n\n  constructor(\n    scene: Scene,\n    numOfPoints?: number,\n    range?: number,\n    chunkSize?: number\n  ) {\n    this.scene = scene;\n    this.color = new Color(MU.generateRandomHexadecimal());\n    this.numOfPoints = numOfPoints || 20;\n    this.range = numOfPoints || 50;\n    this.chunkSize = chunkSize || MathUtils.randInt(4, 7);\n    this.object = this.generateShape();\n    window.addEventListener('keydown', this.onKeyDown);\n    this.scene.add(this.object);\n  }\n\n  public generateShape(\n    tension: number = MathUtils.randFloat(0, 1)\n  ): Mesh<BufferGeometry, MeshLambertMaterial> {\n    this.points = this.generatePoints();\n    this.chunkPoints = DSU.chunk([...this.points], this.chunkSize);\n    const material = new MeshLambertMaterial();\n    material.color = this.color;\n    return new Mesh(this.generateGeometry(tension), material);\n  }\n\n  public updateTension(tension: number): void {\n    this.object.geometry.dispose();\n    this.object.geometry = this.generateGeometry(tension);\n  }\n\n  private generatePoints(): Vector3[] {\n    const points: Vector3[] = [];\n    for (let i = 0; i < this.numOfPoints; i++) {\n      points.push(\n        new Vector3(\n          MathUtils.randFloat(-this.range, this.range),\n          MathUtils.randFloat(-this.range, this.range),\n          MathUtils.randFloat(-this.range, this.range)\n        )\n      );\n    }\n    return points;\n  }\n\n  private generateGeometry(tension: number): BufferGeometry {\n    const geometries: ConvexGeometry[] = [];\n    for (let i = 0; i < this.chunkPoints.length; i++) {\n      geometries.push(\n        new ConvexGeometry(\n          new CatmullRomCurve3(\n            this.chunkPoints[i],\n            true,\n            'catmullrom',\n            tension\n          ).getPoints(RandomShape.divisions)\n        )\n      );\n    }\n    return BufferGeometryUtils.mergeBufferGeometries(geometries);\n  }\n\n  private generateNewShape(): void {\n    this.object.geometry.dispose();\n    this.object.material.dispose();\n    this.scene.remove(this.object);\n    this.object = this.generateShape();\n    this.scene.add(this.object);\n  }\n\n  private generateNewColor(): void {\n    this.color = new Color(MU.generateRandomHexadecimal());\n    this.object.material.color = this.color;\n  }\n\n  private onKeyDown = (event: KeyboardEvent): void => {\n    switch (event.key) {\n      case 'r':\n      case 'R':\n        this.generateNewShape();\n        break;\n      case 'c':\n      case 'C':\n        this.generateNewColor();\n        break;\n    }\n  };\n}\n","import { AmbientLight, PointLight, Scene, Vector3 } from 'three';\n\nexport default class Lights {\n  private readonly _ambientLight: AmbientLight;\n  private readonly _pointLight: PointLight;\n  private readonly _scene: Scene;\n\n  constructor(scene: Scene, position: Vector3 = new Vector3()) {\n    this._ambientLight = new AmbientLight('#444');\n    this._pointLight = new PointLight('#fff');\n    this.position = position;\n    this._scene = scene;\n    this._scene.add(this._ambientLight, this._pointLight);\n  }\n\n  set position(position: Vector3) {\n    this._pointLight.position.copy(position);\n  }\n}\n","import '../css/Main.css';\nimport React, { MutableRefObject, useEffect, useRef } from 'react';\nimport SceneComponents from '../setup/SceneComponents';\nimport RandomShape from '../meshes/RandomShape';\nimport Lights from '../setup/Lights';\nimport { Clock } from 'three';\nimport { useQuery } from '../hooks/hooks';\n\nlet SCENE_COMPONENTS: SceneComponents;\n\nfunction Main() {\n  const container = useRef() as MutableRefObject<HTMLDivElement>;\n  const beating = useQuery().get('beating') === 'true';\n\n  useEffect(() => {\n    let frameId: number;\n    const clock = new Clock();\n    SCENE_COMPONENTS = new SceneComponents(container.current, '#000');\n    new Lights(SCENE_COMPONENTS.scene, SCENE_COMPONENTS.camera.position);\n    const shape = new RandomShape(SCENE_COMPONENTS.scene);\n    // @ts-ignore\n    window['shape'] = shape;\n\n    const start = () => {\n      if (!frameId) frameId = requestAnimationFrame(animate);\n    };\n\n    const animate = () => {\n      frameId = requestAnimationFrame(animate);\n      animateFunctions();\n      SCENE_COMPONENTS.render();\n    };\n\n    const animateFunctions = () => {\n      if (beating) shape.updateTension(Math.sin(clock.getElapsedTime()));\n    };\n\n    const handleResize = () => {\n      SCENE_COMPONENTS.handleResize(\n        container.current.clientWidth,\n        container.current.clientHeight\n      );\n    };\n\n    const stop = () => {\n      cancelAnimationFrame(frameId);\n      window.removeEventListener('resize', handleResize);\n    };\n\n    window.addEventListener('resize', handleResize);\n    start();\n\n    return () => {\n      stop();\n      window.removeEventListener('resize', handleResize);\n    };\n  }, [beating]);\n\n  return <div ref={container} id=\"container\" />;\n}\n\nexport default Main;\n","import { useLocation } from 'react-router-dom';\n\nexport function useQuery() {\n  return new URLSearchParams(useLocation().search);\n}\n","import './css/index.css';\nimport React from 'react';\nimport Main from './components/Main';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter as Router } from 'react-router-dom';\n\nfunction App() {\n  return (\n    <Router>\n      <Main />\n    </Router>\n  );\n}\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}